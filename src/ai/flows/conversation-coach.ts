'use server';

/**
 * @fileOverview Provides an AI conversation coach to suggest reformulations for better communication.
 *
 * @module AIConversationCoach
 *
 * @description This module defines the AI conversation coach functionality, including input/output schemas,
 * AI flow, and supporting functions for analyzing messages.
 *
 * @exports {function} getConversationAdvice - A function that generates the conversation advice.
 * @exports {ConversationAdviceInput} ConversationAdviceInput - The input type for the getConversationAdvice function.
 * @exports {ConversationAdviceOutput} ConversationAdviceOutput - The return type for the getConversationAdvice function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

/**
 * @typedef {object} ConversationAdviceInput
 * @property {string} conversationHistory - The history of the conversation.
 * @property {string} user1Profile - The profile of the first user.
 * @property {string} user2Profile - The profile of the second user.
 */
const ConversationAdviceInputSchema = z.object({
  conversationHistory: z.string().describe('The history of the conversation.'),
  user1Profile: z.string().describe('The profile of the first user.'),
  user2Profile: z.string().describe('The profile of the second user.'),
});

export type ConversationAdviceInput = z.infer<typeof ConversationAdviceInputSchema>;

/**
 * @typedef {object} ConversationAdviceOutput
 * @property {string} advice - The advice generated by the AI.
 */
const ConversationAdviceOutputSchema = z.object({
  advice: z.string().describe('The advice generated by the AI.'),
});

export type ConversationAdviceOutput = z.infer<typeof ConversationAdviceOutputSchema>;

/**
 * Generates conversation advice based on input data.
 *
 * @async
 * @function getConversationAdvice
 * @param {ConversationAdviceInput} input - The input data for generating the advice.
 * @returns {Promise<ConversationAdviceOutput>} The generated conversation advice.
 */
export async function getConversationAdvice(input: ConversationAdviceInput): Promise<ConversationAdviceOutput> {
  return conversationAdviceFlow(input);
}

const conversationAdvicePrompt = ai.definePrompt({
  name: 'conversationAdvicePrompt',
  input: {
    schema: ConversationAdviceInputSchema,
  },
  output: {
    schema: ConversationAdviceOutputSchema,
  },
  prompt: `You are an AI conversation coach.  You are helping two users connect and build rapport.

Here is some information about user1: {{{user1Profile}}}

Here is some information about user2: {{{user2Profile}}}

Here is the current conversation history: {{{conversationHistory}}}

Based on this information, provide advice to help the users build a stronger connection. Focus on suggesting specific questions, topics, or approaches that will foster engagement and understanding.  Be concise and actionable.`,
});

const conversationAdviceFlow = ai.defineFlow<
  typeof ConversationAdviceInputSchema,
  typeof ConversationAdviceOutputSchema
>(
  {
    name: 'conversationAdviceFlow',
    inputSchema: ConversationAdviceInputSchema,
    outputSchema: ConversationAdviceOutputSchema,
  },
  async input => {
    const {output} = await conversationAdvicePrompt(input);
    return output!;
  }
);
